#define UMM_INITIALIZATION		
	[event]
		name=prestart
		
		## load UMagics into the umagic_list
		## 1. basic umagics
		[switch]
			variable=umm_magic_list_option
			[case]
				value=0				## basic alone
				[set_variables]
					name=umagic_list
					mode=replace
					[value]
						{UMM_BASIC_UMAGICS}
					[/value]			
				[/set_variables]
			[/case]
			[case]
				value=1			## basic+extended
				[set_variables]
					name=umagic_list
					mode=replace
					[value]
						{UMM_BASIC_UMAGICS}
						{UMM_EXTENDED_UMAGICS}
					[/value]			
				[/set_variables]				
			[/case]
			[case]
				value=2			## OP magics
				[set_variables]
					name=umagic_list
					mode=replace
					[value]
						{UMM_OP_UMAGICS}
					[/value]			
				[/set_variables]				
			[/case]
			[case]
				value=3			## all magics
				[set_variables]
					name=umagic_list
					mode=replace
					[value]
						{UMM_BASIC_UMAGICS}
						{UMM_EXTENDED_UMAGICS}
						{UMM_OP_UMAGICS}
					[/value]			
				[/set_variables]				
			[/case]
		[/switch]
	
	
		## set the [umagics] tags to unassigned status
		{CLEAR_VARIABLE umagic}
		{ITERATE_FROM_TO 0 9 side_i}
			{VARIABLE umagic[$side_i].is_assigned no}
		{NEXT side_i}
		
		## delete U-magic traits from previous scenarios
		{ITERATE_FROM_TO 1 9 side_i}
			[store_unit]
				variable=umm_unit
				[filter]
					side=$side_i
					canrecruit=yes
				[/filter]
				kill=yes
			[/store_unit]
			{FOREACH umm_unit.modifications.trait trait_i}
				[if]
					[variable]
						name=umm_unit.modifications.trait[$trait_i].id
						equals=umm_umagic_fake_trait
					[/variable]
					[then]
						{CLEAR_VARIABLE umm_unit.modifications.trait[$trait_i]}
					[/then]
				[/if]
			{NEXT trait_i}
			[unstore_unit]
				variable=umm_unit
			[/unstore_unit]			
		{NEXT side_i}
		{CLEAR_VARIABLE umm_unit}
		
		## create umagic options menu
		{UMM_CREATE_UMAGIC_OPTIONS_MENU}
	[/event]
	
#enddef

#define UMM_ASSIGN_UMAGIC
	[event]
		name=start
		[set_menu_item]
			id=umm_assign_umagic
			description="Choose a U-Magic"
			[show_if]  ## show if the side hasn't assigned the UMagic
				[variable]
					name=umagic[$side_number].is_assigned
					equals=no
				[/variable]
			[/show_if]
			[command]		
				## open the menu to choose magic, which modifys $umagic_choice
                [insert_tag]
                    name=message
                    variable=umm_menu
                [/insert_tag]
				
				## give value to the umagic[$side_number]
				[set_variables]
					name=umagic[$side_number]
					to_variable=umagic_list.umagic[$umagic_choice]
				[/set_variables]

				{VARIABLE umagic[$side_number].colddown 0}				
				{VARIABLE umagic[$side_number].is_assigned yes}
				{CLEAR_VARIABLE umagic_choice}
				
				
				## user interface: 1. a trait on leader; 2. a chat on screen; 3. a sound
				{UMM_GIVE_LEADER_TRAIT}
				{UMM_UMAGIC_CHOSEN_SOUND_TEXT}
				
				[fire_event]		## for sustaining events' instant event trigger
					name=umm_sustaining_ie_trigger
				[/fire_event]
				[fire_event]		## for persisting standard units_modifying events, filter_condition in event
					name=umm_sustaining_smu_trigger
				[/fire_event]

			[/command]
		[/set_menu_item]
		
		## activate ATV umagic
		[set_menu_item]
			id=umm_activate_umagic
			description="UMagic: Activate"
			[show_if]  ## show if the side hasn't assigned the UMagic
				[variable]
					name=umagic[$side_number].type 	
					equals="activable"
				[/variable]
				[variable]
					name=umagic[$side_number].colddown
					equals=0
				[/variable]
			[/show_if]	
			[command]
				[fire_event]
					name=$umagic[$side_number].atv_trigger_event_name
				[/fire_event]
				{VARIABLE umagic[$side_number].colddown $umagic[$side_number].sustainability}
				[sound]
					name=explosion.ogg
				[/sound]
				[chat]
					speaker="U-Magic Mod"
					message="Player $side_number activated Unity Magic: $umagic[$side_number].name"
				[/chat]

			[/command]
		[/set_menu_item]
		
		## show cd time
		{UMM_SHOW_COLD_DOWN}

	[/event]
#enddef

#define UMM_GIVE_LEADER_TRAIT
	[modify_unit]
		[filter]
			side=$side_number
			canrecruit=yes
		[/filter]
		[trait]
			name=_"Unity-Magic"
			id=umm_umagic_fake_trait
			description=_"Unity Magic: $umagic[$side_number].name
Effect: $umagic[$side_number].description"
		[/trait]
	[/modify_unit]
#enddef

#define UMM_UMAGIC_CHOSEN_SOUND_TEXT
	[chat]
		speaker="U-Magic Mod"
		message="Player $side_number chose Unity Magic: $umagic[$side_number].name"
	[/chat]
	[sound]
		name=crossbow-fire.ogg
	[/sound]
#enddef
## ======================= create the umagic choosing menu =======================================
#define UMM_CREATE_UMAGIC_OPTIONS_MENU
[set_variables]
    name=umm_menu
    [value]
        caption= _"Choose a Unity Magic"
        message= _"Unity Magics can benefit your army in different ways. There are two types of unity magics: <span color='orange'>Sustaining Magics</span> has a persisting effect throughout the scenario, while <span color='orange'>Activable Magics</span> can only be used once in a while.
    
Choose one unity magic that you prefer:"
        speaker=narrator		
	[/value]
[/set_variables]	
{ITERATE_FROM_TO 0 "$($umagic_list.umagic.length-1)" umagic_i}
    [set_variables]
        name=umm_menu.option
        mode=append
        {UMM_CREATE_UMAGIC_OPTION  $umagic_i}
    [/set_variables]
{NEXT umagic_i}
#enddef 

#define UMM_CREATE_UMAGIC_OPTION INDEX_NUMBER	
[value]
    message="<span color='yellow'>$({INDEX_NUMBER} + 1). $umagic_list.umagic[{INDEX_NUMBER}].name</span>: 
<small>         $umagic_list.umagic[{INDEX_NUMBER}].description </small>"
    [command]
        {VARIABLE umagic_choice {INDEX_NUMBER}}
    [/command]
[/value]
#enddef

## ==================== mechanism events ===============================================
#define UMM_MECHANISM_EVENTS
##events that enables UMagics to function
	{UMM_HANDLE_colddown}		## handles the change of colddown every side turn
	{UMM_SUSTAINING_SMU_TRIGGER_EVENT}	## after choosing umagic, this event is fired if the UMagic is a Sustaining Standard_MU Magic 
	{UMM_SUSTAINING_ETE_TRIGGER_EVENT}	## handle the event that are trigger at every turn's start
	{UMM_SUSTAINING_IE_TRIGGER_EVENT}
	{UMM_ATV_SMU_EVENTS}
##	{UMM_HANDLE_RE}		## recruit ########
	{UMM_HANDLE_RR}		## handle recruit/recall.	if UMagic is active, either modify unit or trigger event
#enddef
#define UMM_ATV_SMU_EVENTS
	## 1. event to  modify all exisiting units
	[event]			
		name=stv_smu_trigger_event
		first_time_only=no
		
		[store_unit]
			[filter]
				side=$side_number
			[/filter]
			variable=umm_troops
			kill=no
		[/store_unit]
		
		{FOREACH umm_troops troop_i}
			[set_variables]
				name=mu_object_tag
				mode=replace
				to_variable=umagic[$side_number].mu_object
			[/set_variables]
			{VARIABLE mu_object_tag.filter.id $umm_troops[$troop_i].id}
			
			[insert_tag]
				name=object
				variable=mu_object_tag
			[/insert_tag]

		{NEXT troop_i}
	
		{CLEAR_VARIABLE umm_troops}		
		{CLEAR_VARIABLE mu_object_tag}	
	[/event]	
	## 2. modify units for 1 turn, when recruit/recall
	## already done by UMM_HANDLE_RR
#enddef
#define UMM_SUSTAINING_SMU_TRIGGER_EVENT		
	[event]			
		name=umm_sustaining_smu_trigger
		first_time_only=no
		[filter_condition]		## standard unit_modify;	sustaining
			[variable]
				name=umagic[$side_number].standard_mu
				equals="yes"
			[/variable]
			[variable]
				name=umagic[$side_number].sustainability
				equals=0				
			[/variable]
		[/filter_condition]
		
		
		[store_unit]
			[filter]
				side=$side_number
			[/filter]
			variable=umm_troops
			kill=no
		[/store_unit]
		
		{FOREACH umm_troops troop_i}
			[set_variables]
				name=mu_object_tag
				mode=replace
				to_variable=umagic[$side_number].mu_object
			[/set_variables]
			{VARIABLE mu_object_tag.filter.id $umm_troops[$troop_i].id}
			
			[insert_tag]
				name=object
				variable=mu_object_tag
			[/insert_tag]

		{NEXT troop_i}
	
		{CLEAR_VARIABLE umm_troops}		
		{CLEAR_VARIABLE mu_object_tag}	
	[/event]
#enddef

#define UMM_SUSTAINING_IE_TRIGGER_EVENT
	## instantaneous trigger event
	[event]			
		name=umm_sustaining_ie_trigger
		first_time_only=no
		
		[filter_condition]		## trigger event;	sustaining
			[variable]
				name=umagic[$side_number].ie_trigger_event
				equals="yes"
			[/variable]
			[variable]
				name=umagic[$side_number].sustainability
				equals=0				
			[/variable]
		[/filter_condition]
		
		[fire_event]
			name=$umagic[$side_number].ie_trigger_event_name
		[/fire_event]
	[/event]
#enddef

#define UMM_SUSTAINING_ETE_TRIGGER_EVENT
	## every turn end trigger event
	[event]			
		name=side turn end
		first_time_only=no
		
		[filter_condition]		## every turn start trigger event;	
			[variable]
				name=umagic[$side_number].ete_trigger_event
				equals="yes"
			[/variable]
		[/filter_condition]
		
		[if]
			[variable]
				name=umagic[$side_number].colddown
				equals=$umagic[$side_number].sustainability
			[/variable]
			[then]
				[fire_event]
					name=$umagic[$side_number].ete_trigger_event_name
				[/fire_event]
			[/then]
		[/if]

	[/event]
#enddef


#define UMM_HANDLE_colddown
	[event]
		name=side turn
		first_time_only=no
		

		[if]
			[variable]
				name=umagic[$side_number].colddown				## if colddown=sustainability, then the unity-magic active; if colddown=0, activable;
				greater_than=0
			[/variable]
			[then]
				{VARIABLE_OP umagic[$side_number].colddown sub 1}
			[/then]
		[/if]
	[/event]
#enddef

#define UMM_HANDLE_RR
	## modify_unit event
	[event]
		name=recruit,recall
		first_time_only=no
		
		[filter_condition]		## standard_mu event
			[variable]
				name=umagic[$side_number].standard_mu
				equals="yes"
			[/variable]
		[/filter_condition]

		[if]
			[variable]
				name=umagic[$side_number].colddown
				equals=$umagic[$side_number].sustainability
			[/variable]
			[then]
				[set_variables]
					name=mu_object_tag
					mode=replace
					to_variable=umagic[$side_number].mu_object
				[/set_variables]
				{VARIABLE mu_object_tag.filter.x $x1}
				{VARIABLE mu_object_tag.filter.y $y1}
				
				[insert_tag]
					name=object
					variable=mu_object_tag
				[/insert_tag]
			
				{CLEAR_VARIABLE mu_object_tag}	
			[/then]
		[/if]			
	[/event]
	
	## for rr_events, that are triggered when recruit/recall
	[event]
		name=recruit,recall
		first_time_only=no
		
		[filter_condition]
			[variable]
				name=umagic[$side_number].rr_event
				equals="yes"
			[/variable]			
		[/filter_condition]

		[if]
			[variable]
				name=umagic[$side_number].colddown
				equals=$umagic[$side_number].sustainability
			[/variable]
			[then]
				[fire_event]
					name=$umagic[$side_number].rr_event_name
					[primary_unit]
						x,y=$x1,$y1
					[/primary_unit]
				[/fire_event]
			[/then]
		[/if]			
	[/event]
#enddef


## ======================SHOW COLDDOWN ==========================================
#define UMM_SHOW_COLD_DOWN
	{UMM_SHOW_COLD_DOWN_ITEM 1 (equals=1) 1}
	{UMM_SHOW_COLD_DOWN_ITEM 2 (equals=2) 2}
	{UMM_SHOW_COLD_DOWN_ITEM 3 (equals=3) 3}
	{UMM_SHOW_COLD_DOWN_ITEM 4 (equals=4) 4}
	{UMM_SHOW_COLD_DOWN_ITEM 5 (equals=5) 5}
	{UMM_SHOW_COLD_DOWN_ITEM 6 (equals=6) 6}
	{UMM_SHOW_COLD_DOWN_ITEM 7 (equals=7) 7}
	{UMM_SHOW_COLD_DOWN_ITEM 8 (equals=8) 8}
	{UMM_SHOW_COLD_DOWN_ITEM 9 (equals=9) 9}
	{UMM_SHOW_COLD_DOWN_ITEM (>9) (greater_than=9) 10}
#enddef

#define UMM_SHOW_COLD_DOWN_ITEM SHOW_TEXT CONDITION_TEXT NUMBER
		[set_menu_item]
			id=umm_show_umagic_cd_{NUMBER}
			description="U-Magic Colddown: {SHOW_TEXT}"
			[show_if]  ## show if the side hasn't assigned the UMagic
				[variable]
					name=umagic[$side_number].type 	
					equals="activable"
				[/variable]
				[variable]
					name=umagic[$side_number].colddown
					{CONDITION_TEXT}
				[/variable]
			[/show_if]	
		[/set_menu_item]
#enddef


